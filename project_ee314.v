
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module project_ee314(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clk_25mhz ;

wire [9:0] xpixel_top;
wire [9:0] ypixel_top;
wire [23:0] rgb_wire;

wire button0;
wire button1;
wire button2;
wire button3;

wire [3:0] angle;
wire projectile;

not n1(button0 ,KEY[0]);
not n2(button1 ,KEY[2]);
not n3(button2 ,KEY[1]);
not n4(button3 ,KEY[3]);

// enemy 1 
wire [9:0] x1;
wire [9:0] y1;
wire [9:0] health1;
wire [1:0] typeout1;
wire [3:0] angular1;
wire [1:0] type1;

//enemy2
wire [9:0] x2;
wire [9:0] y2;
wire [9:0] health2;
wire [1:0] typeout2;
wire [3:0] angular2;
wire [1:0] type2;

// enemy3
wire [9:0] x3;
wire [9:0] y3;
wire [9:0] health3;
wire [1:0] typeout3;
wire [3:0] angular3;
wire [1:0] type3;

// enemy4
wire [9:0] x4;
wire [9:0] y4;
wire [9:0] health4;
wire [1:0] typeout4;
wire [3:0] angular4;
wire [1:0] type4;

//enemy5
wire [9:0] x5;
wire [9:0] y5;
wire [9:0] health5;
wire [1:0] typeout5;
wire [3:0] angular5;
wire [1:0] type5;

//over kablolarÄ±
wire over1;
wire over2;
wire over3;
wire over4;
wire over5;
wire over_overall;

// active wires
wire active1;
wire active2;
wire active3;
wire active4;
wire active5;

// counter wires

wire [15:0] count1;
wire [15:0] count2;
wire [15:0] count3;
wire [15:0] count4;
wire [15:0] count5;
wire [15:0] count_total;

// bcd digit wires

wire [3:0] digit1;
wire [3:0] digit10;
wire [3:0] digit100;

// counter wires

wire [31:0] survival_time;

//=======================================================
//  instantiations 
//=======================================================

clock_divider divider_25(.clk(CLOCK_50),.clk_25mhz(clk_25mhz));

vga_driver driver(.clk(clk_25mhz),.reset(button0),.color_in(rgb_wire),.next_x(xpixel_top),.next_y(ypixel_top),.hsync(VGA_HS),.vsync(VGA_VS),.red(VGA_R),.green(VGA_G),.blue(VGA_B),.sync(VGA_SYNC_N),.clk_vga(VGA_CLK),.blank(VGA_BLANK_N));

SpaceshipController player(.clk(clk_25mhz),.reset(button0),.rotate_left(button1),.rotate_right(button2),.fire(button3),.mode(SW[1:0]),.angle_out(angle),.projectiles(projectile));

TopLevelDrawing draw(.clk(clk_25mhz),.reset(button0),.xpixel(xpixel_top),.ypixel(ypixel_top),.angle_idx(angle),.rgb(rgb_wire),.x_mid1(x1),.y_mid1(y1),.health(health1),.mode(SW[1:0]),.typeout1(typeout1),.fire(button3),.x_mid2(x2),.y_mid2(y2),.typeout2(typeout2),.health2(health2),.x_mid3(x3),.y_mid3(y3),.typeout3(typeout3),.health3(health3),.x_mid4(x4),.y_mid4(y4),.typeout4(typeout4),.health4(health4),.x_mid5(x5),.y_mid5(y5),.typeout5(typeout5),.health5(health5),.over(over_overall),.digit1(digit1),.digit10(digit10),.digit100(digit100));

// enemy1
angle1random arandom1(.clk(clk_25mhz),.angular(angular1));
type1random trandom1(.clk(clk_25mhz),.type(type1));
enemy enemy1(.clk(clk_25mhz),.shootingtype(SW[1:0]),.hit_angle(angle),.angle(angular1),.type_enemy(type1),.outgoing_projectiles(projectile),.reset(button0),.over(over1),.x(x1),.y(y1),.health(health1),.active(active1),.type_out1(typeout1),.counter_1(count1));

// enemy2

angle2random arandom2(.clk(clk_25mhz),.angular(angular2));
type2random trandom2(.clk(clk_25mhz),.type(type2));
enemy2 enemy2(.clk(clk_25mhz),.shootingtype(SW[1:0]),.hit_angle(angle),.angle(angular2),.type_enemy(type2),.outgoing_projectiles(projectile),.reset(button0),.over(over2),.x(x2),.y(y2),.health(health2),.active(active2),.type_out1(typeout2),.counter_2(count2));


// enemy3

angle3random arandom3(.clk(clk_25mhz),.angular(angular3));
type3random trandom3(.clk(clk_25mhz),.type(type3));
enemy3 enemy3(.clk(clk_25mhz),.shootingtype(SW[1:0]),.hit_angle(angle),.angle(angular3),.type_enemy(type3),.outgoing_projectiles(projectile),.reset(button0),.over(over3),.x(x3),.y(y3),.health(health3),.active(active3),.type_out1(typeout3),.counter_3(count3));

// enemy4

angle4random arandom4(.clk(clk_25mhz),.angular(angular4));
type4random trandom4(.clk(clk_25mhz),.type(type4));
enemy4 enemy4(.clk(clk_25mhz),.shootingtype(SW[1:0]),.hit_angle(angle),.angle(angular4),.type_enemy(type4),.outgoing_projectiles(projectile),.reset(button0),.over(over4),.x(x4),.y(y4),.health(health4),.active(active4),.type_out1(typeout4),.counter_4(count4));

// enemy5

angle5random arandom5(.clk(clk_25mhz),.angular(angular5));
type5random trandom5(.clk(clk_25mhz),.type(type5));
enemy5 enemy5(.clk(clk_25mhz),.shootingtype(SW[1:0]),.hit_angle(angle),.angle(angular5),.type_enemy(type5),.outgoing_projectiles(projectile),.reset(button0),.over(over5),.x(x5),.y(y5),.health(health5),.active(active5),.type_out1(typeout5),.counter_5(count5));

// gameover
game_over over_conditioner(.over1(over1),.over2(over2),.over3(over3),.over4(over4),.over5(over5),.bit(over_overall));

// counter for score

total_counter scorecounter(.over(over_overall),.clk(clk_25mhz),.count1(count1),.count2(count2),.count3(count3),.count4(count4),.count5(count5),.total_count(count_total));

// seven segment
segmentation seven_seg(.how_many(survival_time),.segment_yzler(HEX2),.segment_onlar(HEX1),.segment_birler(HEX0));

// bcd digit output creator
bcd digit_outter(.total_count(count_total),.bir(digit1),.on(digit10),.yz(digit100));

// survival time counter
survival_time timer_survivor(.reset(button0),.over(over_overall),.clk(clk_25mhz),.n(survival_time));

//loser
loser lost(.clk(clk_25mhz),.over(over_overall),.ledr(LEDR));


endmodule
